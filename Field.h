#pragma once
// Структура для представления координат
struct Point
{
	int x;
	int y;
};

// Класс для представления поля для игры
class Field
{
private:
	// Поля
	int rows;     // количество строк
	int cols;     // количество столбцев
	char** field; // указатель на поле (двумерный масив)

public:
	/* Тип:                   Конструктор
	   Параметры:             количество строк, количество столбцев
	   Возвращаемое значение: -
	   Описание:              выделение памяти для поля на куче и его заполнение */
	Field(int rows = 10, int cols = 10);

	/* Тип:                   Деструктор
	   Параметры:             -
	   Возвращаемое значение: -
	   Описание:              очищение памяти под поле на кучи */
	~Field();

	/* Тип:                   Метод
	   Параметры:             -
	   Возвращаемое значение: -
	   Описание:              заполнение поля границами и пустыми клетками */
	void Clear();

	/* Тип:                   Метод
	   Параметры:             -
	   Возвращаемое значение: -
	   Описание:              вывод поля на экран */
	void Show() const;

	/* Тип:                   Метод
	   Параметры:             точка для постановки символа, символ
	   Возвращаемое значение: -
	   Описание:              установка символа на поле за заданными координатами */
	void SetPoint(const Point& point, char ch);

	/* Тип:                   Метод
	   Параметры:             -
	   Возвращаемое значение: -
	   Описание:              установка яблока на поле в рандомном месте */
	void SetApple();

	/* Тип:                   Метод
	   Параметры:             точка
	   Возвращаемое значение: символ, который находится в этой точке
	   Описание:              возвращение символа, который находится в указаной точке */
	char GetElement(const Point& point) const;

	// Методы, возвращающие размеры поля
	int GetRows() const { return rows; }
	int GetCols() const { return cols; }
};